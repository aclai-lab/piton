- for ($j = 0; $j < $data->numInstances(); $j++) { che diventi un generatore di istanze
- Weka: check consistency with JRip (activate debug info)

? - ignora regole nanr at predict time ?
? - move processing from SQL to PHP? force non-null values check nel codice?

#####################################################
DROP TABLE `phptest`.`models__index`
CREATE VIEW `models__index_view` AS SELECT modelName, numRules, totN, trainN, testN, positives, negatives, TP, TN, FP, FN, accuracy, sensitivity, specificity, PPV, NPV  FROM `models__index` ORDER BY `tableName` ASC
SELECT * FROM `models__index`
where tableName in (SELECT DISTINCT tableName FROM `models__index`  )
ORDER BY `models__index`.`date` DESC , `models__index`.`tableName` ASC

SELECT COUNT(*),
TBS_COLONNA_APPLICABILE,
TBS_COLONNA_PERCENTUALE,
TBS_COLONNA_VALORE,
IF(Diagnosi.TBS_COLONNA_APPLICABILE,0+IF(Diagnosi.TBS_COLONNA_PERCENTUALE, 0, TBS_COLONNA_VALORE),NULL)
FROM `Diagnosi` GROUP BY
TBS_COLONNA_APPLICABILE,
TBS_COLONNA_PERCENTUALE,
TBS_COLONNA_VALORE,
IF(Diagnosi.TBS_COLONNA_APPLICABILE,0+IF(Diagnosi.TBS_COLONNA_PERCENTUALE, 0, TBS_COLONNA_VALORE),NULL)


SELECT
COUNT(*),
IF(Diagnosi.FRAX_APPLICABILE,IF(ISNULL(Diagnosi.FRAX_PERCENTUALE),NULL,IF(Diagnosi.FRAX_PERCENTUALE OR Diagnosi.FRAX_FRATTURE_MAGGIORI < 0.1, 0, IF(Diagnosi.FRAX_FRATTURE_MAGGIORI = 0, 0, 'value'))),NULL)
AS x
FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID
WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1
GROUP BY
x

0

SELECT
COUNT(*),
IF(Diagnosi.FRAX_APPLICABILE,IF(ISNULL(Diagnosi.FRAX_COLLO_FEMORE_PERCENTUALE),NULL,IF(Diagnosi.FRAX_COLLO_FEMORE_PERCENTUALE OR Diagnosi.FRAX_COLLO_FEMORE < 0.1, 0, 
IF(Diagnosi.FRAX_COLLO_FEMORE = 0, 0, 'value')
)),NULL)
AS x
FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID
WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1
GROUP BY
x

26


SELECT
COUNT(*),
IF(Diagnosi.DEFRA_APPLICABILE,IF(ISNULL(Diagnosi.DEFRA_PERCENTUALE_01),NULL,IF((Diagnosi.DEFRA_PERCENTUALE_01 OR Diagnosi.DEFRA < 0.1) AND Diagnosi.DEFRA_PERCENTUALE_50 = 0, 0,IF(ISNULL(Diagnosi.DEFRA_PERCENTUALE_50),NULL,IF(Diagnosi.DEFRA_PERCENTUALE_50 OR Diagnosi.DEFRA > 50, 50, 
if(Diagnosi.DEFRA = 0, 0, if(Diagnosi.DEFRA = 50, 50, 'value'))
)))),NULL)
AS x
FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID
WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1
GROUP BY
x

1
124


SELECT
COUNT(*),
PrincipiAttivi.NOME
FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeutiche ON RaccomandazioniTerapeutiche.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeuticheUnitarie ON RaccomandazioniTerapeuticheUnitarie.ID_RACCOMANDAZIONE_TERAPEUTICA = RaccomandazioniTerapeutiche.ID AND RaccomandazioniTerapeuticheUnitarie.TIPO != 'Indagini approfondimento' AND !ISNULL(RaccomandazioniTerapeuticheUnitarie.TIPO) LEFT JOIN ElementiTerapici ON ElementiTerapici.ID_RACCOMANDAZIONE_TERAPEUTICA_UNITARIA = RaccomandazioniTerapeuticheUnitarie.ID LEFT JOIN PrincipiAttivi ON ElementiTerapici.ID_PRINCIPIO_ATTIVO = PrincipiAttivi.ID AND !ISNULL(CONCAT(PrincipiAttivi.NOME, IF(!STRCMP(PrincipiAttivi.QUANTITA, 'NULL') || ISNULL(PrincipiAttivi.QUANTITA), '', CONCAT(' ', PrincipiAttivi.QUANTITA)))) WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1 AND FIND_IN_SET(RaccomandazioniTerapeuticheUnitarie.TIPO, 'Terapie osteoprotettive,Terapie ormonali') > 0 AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Terapie osteoprotettive'
GROUP BY PrincipiAttivi.NOME


SELECT DISTINCT Referti.ID FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeutiche ON RaccomandazioniTerapeutiche.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeuticheUnitarie ON RaccomandazioniTerapeuticheUnitarie.ID_RACCOMANDAZIONE_TERAPEUTICA = RaccomandazioniTerapeutiche.ID AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' AND !ISNULL(RaccomandazioniTerapeuticheUnitarie.TIPO) LEFT JOIN ElementiTerapici ON ElementiTerapici.ID_RACCOMANDAZIONE_TERAPEUTICA_UNITARIA = RaccomandazioniTerapeuticheUnitarie.ID LEFT JOIN PrincipiAttivi ON ElementiTerapici.ID_PRINCIPIO_ATTIVO = PrincipiAttivi.ID AND !ISNULL(PrincipiAttivi.NOME) WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1 AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione'
ORDER BY Referti.DATA_REFERTO ASC


SELECT DISTINCT Referti.ID FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeutiche ON RaccomandazioniTerapeutiche.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeuticheUnitarie ON RaccomandazioniTerapeuticheUnitarie.ID_RACCOMANDAZIONE_TERAPEUTICA = RaccomandazioniTerapeutiche.ID AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' AND !ISNULL(RaccomandazioniTerapeuticheUnitarie.TIPO) LEFT JOIN ElementiTerapici ON ElementiTerapici.ID_RACCOMANDAZIONE_TERAPEUTICA_UNITARIA = RaccomandazioniTerapeuticheUnitarie.ID LEFT JOIN PrincipiAttivi ON ElementiTerapici.ID_PRINCIPIO_ATTIVO = PrincipiAttivi.ID AND !ISNULL(PrincipiAttivi.NOME) WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1 AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' ORDER BY PrincipiAttivi.NOME ASC, Referti.ID ASC




SELECT DISTINCT Referti.ID FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeutiche ON RaccomandazioniTerapeutiche.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeuticheUnitarie ON RaccomandazioniTerapeuticheUnitarie.ID_RACCOMANDAZIONE_TERAPEUTICA = RaccomandazioniTerapeutiche.ID AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' AND !ISNULL(RaccomandazioniTerapeuticheUnitarie.TIPO) LEFT JOIN ElementiTerapici ON ElementiTerapici.ID_RACCOMANDAZIONE_TERAPEUTICA_UNITARIA = RaccomandazioniTerapeuticheUnitarie.ID LEFT JOIN PrincipiAttivi ON ElementiTerapici.ID_PRINCIPIO_ATTIVO = PrincipiAttivi.ID AND !ISNULL(PrincipiAttivi.NOME)
where
Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1 AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' 
AND Referti.ID not in
(
SELECT DISTINCT Referti.ID FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeutiche ON RaccomandazioniTerapeutiche.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeuticheUnitarie ON RaccomandazioniTerapeuticheUnitarie.ID_RACCOMANDAZIONE_TERAPEUTICA = RaccomandazioniTerapeutiche.ID AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' AND !ISNULL(RaccomandazioniTerapeuticheUnitarie.TIPO) LEFT JOIN ElementiTerapici ON ElementiTerapici.ID_RACCOMANDAZIONE_TERAPEUTICA_UNITARIA = RaccomandazioniTerapeuticheUnitarie.ID JOIN PrincipiAttivi ON ElementiTerapici.ID_PRINCIPIO_ATTIVO = PrincipiAttivi.ID AND !ISNULL(PrincipiAttivi.NOME)
WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1 AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' ORDER BY PrincipiAttivi.NOME ASC, Referti.ID ASC
)

SELECT Referti.ID, PrincipiAttivi.NOME AS PrincipiAttivi_NOME, Pazienti.SESSO AS Pazienti_SESSO, DATEDIFF(Referti.DATA_REFERTO,Pazienti.DATA_NASCITA) / 365, Anamnesi.STATO_MENOPAUSALE AS Anamnesi_STATO_MENOPAUSALE, Anamnesi.ETA_MENOPAUSA AS Anamnesi_ETA_MENOPAUSA, CONCAT('', COALESCE(Anamnesi.TERAPIA_STATO,'Mai')), Anamnesi.TERAPIA_ANNI_SOSPENSIONE AS Anamnesi_TERAPIA_ANNI_SOSPENSIONE, CONCAT('', COALESCE(Anamnesi.TERAPIA_OSTEOPROTETTIVA_ORMONALE,0)), CONCAT('', COALESCE(Anamnesi.TERAPIA_OSTEOPROTETTIVA_SPECIFICA,'0')), Anamnesi.VITAMINA_D_TERAPIA_OSTEOPROTETTIVA AS Anamnesi_VITAMINA_D_TERAPIA_OSTEOPROTETTIVA, CONCAT('', COALESCE(Anamnesi.TERAPIA_ALTRO_CHECKBOX,0)), 0+IF(ISNULL(Anamnesi.BMI) OR Anamnesi.BMI = -1, NULL, Anamnesi.BMI), CONCAT('', IF(ISNULL(Anamnesi.FRATTURA_VERTEBRE), '0', Anamnesi.FRATTURA_VERTEBRE)), CONCAT('', IF(ISNULL(Anamnesi.FRATTURA_FEMORE), '0', Anamnesi.FRATTURA_FEMORE)), CONCAT('', COALESCE(Anamnesi.FRATTURA_SITI_DIVERSI,0)), Anamnesi.FRATTURA_FAMILIARITA AS Anamnesi_FRATTURA_FAMILIARITA, CONCAT('', IF(ISNULL(Anamnesi.ABUSO_FUMO_CHECKBOX),'No',IF(Anamnesi.ABUSO_FUMO_CHECKBOX, Anamnesi.ABUSO_FUMO, 'No'))), CONCAT('', IF(ISNULL(Anamnesi.ALCOL_CHECKBOX),NULL,IF(Anamnesi.ALCOL_CHECKBOX, Anamnesi.ALCOL, 'No'))), CONCAT('', IF(ISNULL(Anamnesi.USO_CORTISONE_CHECKBOX),'No',IF(Anamnesi.USO_CORTISONE_CHECKBOX, Anamnesi.USO_CORTISONE, 'No'))), CONCAT('', COALESCE(Anamnesi.MALATTIE_ATTUALI_ARTRITE_REUM,0)), CONCAT('', COALESCE(Anamnesi.MALATTIE_ATTUALI_ARTRITE_PSOR,0)), CONCAT('', COALESCE(Anamnesi.MALATTIE_ATTUALI_LUPUS,0)), CONCAT('', COALESCE(Anamnesi.MALATTIE_ATTUALI_SCLERODERMIA,0)), CONCAT('', COALESCE(Anamnesi.MALATTIE_ATTUALI_ALTRE_CONNETTIVITI,0)), Anamnesi.CAUSE_OSTEOPOROSI_SECONDARIA AS Anamnesi_CAUSE_OSTEOPOROSI_SECONDARIA, CONCAT('', IF(Anamnesi.CAUSE_OSTEOPOROSI_SECONDARIA = 'NULL',0,IF(ISNULL(Anamnesi.CAUSE_OSTEOPOROSI_SECONDARIA),0,1))), CONCAT('', COALESCE(Anamnesi.PATOLOGIE_UTERINE_CHECKBOX,0)), CONCAT('', COALESCE(Anamnesi.NEOPLASIA_CHECKBOX,0)), CONCAT('', COALESCE(Anamnesi.SINTOMI_VASOMOTORI,0)), CONCAT('', COALESCE(Anamnesi.SINTOMI_DISTROFICI,0)), CONCAT('', COALESCE(Anamnesi.DISLIPIDEMIA_CHECKBOX,0)), CONCAT('', COALESCE(Anamnesi.IPERTENSIONE,0)), CONCAT('', COALESCE(Anamnesi.RISCHIO_TEV,0)), CONCAT('', COALESCE(Anamnesi.PATOLOGIA_CARDIACA,0)), CONCAT('', COALESCE(Anamnesi.PATOLOGIA_VASCOLARE,0)), CONCAT('', COALESCE(Anamnesi.INSUFFICIENZA_RENALE,0)), CONCAT('', COALESCE(Anamnesi.PATOLOGIA_RESPIRATORIA,0)), CONCAT('', COALESCE(Anamnesi.PATOLOGIA_CAVO_ORALE_CHECKBOX,0)), CONCAT('', COALESCE(Anamnesi.PATOLOGIA_EPATICA,0)), CONCAT('', COALESCE(Anamnesi.PAROLOGIA_ESOFAGEA,0)), CONCAT('', COALESCE(Anamnesi.GASTRO_DUODENITE,0)), CONCAT('', COALESCE(Anamnesi.GASTRO_RESEZIONE,0)), CONCAT('', COALESCE(Anamnesi.RESEZIONE_INTESTINALE,0)), CONCAT('', COALESCE(Anamnesi.MICI,0)), CONCAT('', COALESCE(Anamnesi.ALTRE_PATOLOGIE_CHECKBOX,0)), 0+COALESCE(Anamnesi.VITAMINA_D,0), Anamnesi.COLONNA_Z_SCORE AS Anamnesi_COLONNA_Z_SCORE, Anamnesi.COLONNA_T_SCORE AS Anamnesi_COLONNA_T_SCORE, Anamnesi.FEMORE_Z_SCORE AS Anamnesi_FEMORE_Z_SCORE, Anamnesi.FEMORE_T_SCORE AS Anamnesi_FEMORE_T_SCORE, Diagnosi.SITUAZIONE_COLONNA AS Diagnosi_SITUAZIONE_COLONNA, CONCAT('', IF(Diagnosi.SITUAZIONE_FEMORE_SN_CHECKBOX, Diagnosi.SITUAZIONE_FEMORE_SN, IF(Diagnosi.SITUAZIONE_FEMORE_DX_CHECKBOX, Diagnosi.SITUAZIONE_FEMORE_DX, NULL))), CONCAT('', IF(!ISNULL(Diagnosi.COLONNA_NON_ANALIZZABILE) AND !ISNULL(Diagnosi.VERTEBRE_NON_ANALIZZATE_CHECKBOX),IF(Diagnosi.COLONNA_NON_ANALIZZABILE,'No',IF(Diagnosi.VERTEBRE_NON_ANALIZZATE_CHECKBOX,'Parzialmente','Tutta')),NULL)), Diagnosi.COLONNA_VALORI_SUPERIORI AS Diagnosi_COLONNA_VALORI_SUPERIORI, CONCAT('', IF(ISNULL(Diagnosi.FEMORE_NON_ANALIZZABILE),NULL,IF(Diagnosi.FEMORE_NON_ANALIZZABILE,'0','1'))), CONCAT('', COALESCE(Diagnosi.FRAX_APPLICABILE,0)), IF(Diagnosi.FRAX_APPLICABILE,0+IF(ISNULL(Diagnosi.FRAX_PERCENTUALE),NULL,IF(Diagnosi.FRAX_PERCENTUALE OR Diagnosi.FRAX_FRATTURE_MAGGIORI < 0.1, 0, Diagnosi.FRAX_FRATTURE_MAGGIORI)),NULL), IF(Diagnosi.FRAX_APPLICABILE,0+IF(ISNULL(Diagnosi.FRAX_COLLO_FEMORE_PERCENTUALE),NULL,IF(Diagnosi.FRAX_COLLO_FEMORE_PERCENTUALE OR Diagnosi.FRAX_COLLO_FEMORE < 0.1, 0, Diagnosi.FRAX_COLLO_FEMORE)),NULL), CONCAT('', COALESCE(Diagnosi.DEFRA_APPLICABILE,0)), IF(Diagnosi.DEFRA_APPLICABILE,0+IF(ISNULL(Diagnosi.DEFRA_PERCENTUALE_01),NULL,IF((Diagnosi.DEFRA_PERCENTUALE_01 OR Diagnosi.DEFRA < 0.1) AND Diagnosi.DEFRA_PERCENTUALE_50 = 0, 0,IF(ISNULL(Diagnosi.DEFRA_PERCENTUALE_50),NULL,IF(Diagnosi.DEFRA_PERCENTUALE_50 OR Diagnosi.DEFRA > 50, 50, Diagnosi.DEFRA)))),NULL), Densitometrie.TOT_Z_SCORE AS Densitometrie_TOT_Z_SCORE, Densitometrie.TOT_T_SCORE AS Densitometrie_TOT_T_SCORE, Densitometrie.NECK_Z_SCORE AS Densitometrie_NECK_Z_SCORE, Densitometrie.NECK_T_SCORE AS Densitometrie_NECK_T_SCORE, Referti.ID AS Referti_ID FROM Referti LEFT JOIN Pazienti ON Pazienti.ID = Referti.ID_PAZIENTE LEFT JOIN Anamnesi ON Anamnesi.ID_REFERTO = Referti.ID LEFT JOIN Diagnosi ON Diagnosi.ID_REFERTO = Referti.ID LEFT JOIN Densitometrie ON Densitometrie.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeutiche ON RaccomandazioniTerapeutiche.ID_REFERTO = Referti.ID LEFT JOIN RaccomandazioniTerapeuticheUnitarie ON RaccomandazioniTerapeuticheUnitarie.ID_RACCOMANDAZIONE_TERAPEUTICA = RaccomandazioniTerapeutiche.ID AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione' AND !ISNULL(RaccomandazioniTerapeuticheUnitarie.TIPO) LEFT JOIN ElementiTerapici ON ElementiTerapici.ID_RACCOMANDAZIONE_TERAPEUTICA_UNITARIA = RaccomandazioniTerapeuticheUnitarie.ID LEFT JOIN PrincipiAttivi ON ElementiTerapici.ID_PRINCIPIO_ATTIVO = PrincipiAttivi.ID AND !ISNULL(PrincipiAttivi.NOME) WHERE Referti.DATA_REFERTO BETWEEN '2018-09-01' AND '2020-08-31' AND Anamnesi.BMI is NOT NULL AND Anamnesi.BMI != -1 AND RaccomandazioniTerapeuticheUnitarie.TIPO = 'Vitamina D Supplementazione'
and FIND_IN_SET(Referti.ID,'148,150,2164,560')

#####################################################

/*
TODOs:
- Text processing via NlpTools
- Parallelize code ( https://medium.com/@rossbulat/true-php7-multi-threading-how-to-rebuild-php-and-use-pthreads-bed4243c0561 )
- Implement an unweighted version of Instances
- Fix those == that should actually be === https://stackoverflow.com/questions/12151997/why-does-1234-1234-test-evaluate-to-true#comment16259587_12151997
- Add method setSQL() that directly asks for the SELECT - FROM - WHERE query;
- Make sql querying secure with addslashes or whatever
 */

- Randomizza train indipendentemente (Non per JRip) magari un parametro randomizzasi/no

- solve the prediction on one-column-more-attributes.
	then maybe hardcode in the sql that a given column must have that value, at prediction time?

- provide method for creating arbitrary attributes:
- provide method for creating column categorical from a checkbox+value pair of attrs, with reverse=false flag:
	create attribute "FRATTURA_VERTEBRE" from 
	Anamnesi.FRATTURA_VERTEBRE_CHECKBOX
	Anamnesi.FRATTURA_VERTEBRE
- map
- merge di due o piu colonne in un solo attributo (situazione_femore_sn,dx), in piu' forza categorico (left and right hip)


- TODO don't recurse when the outcome is false... NO_thing is not entirely safe
TODO: at prediction time just interrogate the database once and then use that same row for every level

- NLPTools http://php-nlp-tools.com/documentation/transformations.html http://php-nlp-tools.com/documentation/tokenizers.html

- test con piu' livelli (e.g quantita')
// TODO bow possibility to specify the langage for each column
// TODO stemming in italiano
